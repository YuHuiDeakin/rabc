% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/feature_calculation.R
\name{calculate_feature_time}
\alias{calculate_feature_time}
\title{Time domain feature calculation}
\usage{
calculate_feature_time(df_raw = NULL, winlen_dba, axis_num = 3)
}
\arguments{
\item{df_raw}{A data.frame or tibble contains raw accelerometer data. In this
version, it should be arranged as x,y,z,x,y,z,...,label for each row and all
rows should have the same length.For dual-axial accelerometer data, it should
be arranged as x,y,x,y,...,label. And for single-axial, it's arranged as x,x,...,
label.}

\item{winlen_dba}{An integer scalar defining the length of running window for
ODBA calculation. It is suggested that the length be derived over a period of
no less than 1 stroke cycle. See Shepard et al. 2008 doi:10.3354/ab00104.}

\item{axis_num}{An integer scalar indicating number of axis in the dataset.}
}
\value{
A data.frame contains all caculated time domain features with 19
 variables (columns) named x_mean, y_mean, z_mean, x_variance, y_variance,
 z_variance, x_sd, y_sd, z_sd, x_max, y_max, z_max, x_min, y_min, z_min,
 x_range, y_range, z_range, ODBA. The cases (rows) in the returned data.frame
 equal to the cases of df_raw. For dual-axial accelerometer data, the returned
 data.frame will contain columns start with character "x" and "y", as well as
 ODBA. For single-axis, the returned data.frame will contain columns start with
 character "x" as well as ODBA.
}
\description{
\code{calculate_feature_time} calculates accelerometer data into time domain mathemetical
features.
}
\details{
Please see \url{https://en.wikipedia.org/wiki/Feature_engineering} for the
definition of feature engineering or feature extraction. In this function, basic
time domain features were calculated including: mean, variance, standard deviation,
max, min, range and ODBA. These features are calculated for each segment and each
ACC axis separately (denoted with prefix x,y,z), except for ODBA, which is calculated
using all available axes. ODBA is short for Overall Dynamic Body
Acceleration. This value was proved to be correlated with animal energy expenditure
in many studies, see Wilson et al. 2006 doi: 10.1111/j.1365-2656.2006.01127.x for
more details. Here, ODBA were calculated into mean value of the behaviour
segementation. Note that this function doesn't give inclusive calculations of all
potentially valuable time domain features and since it is asserted that feature
engineering plays and important part of machine learning model's success, more
customized features could also be calculated by users. A review reference - Brown
et al. 2013 doi:10.1186/2050-3385-1-20 - provides more potential features. One could
also reference feature engineering for human wearable devices which partly use
tri-axial accelerometer data since this is also a popular research and commercialized
field.

It is recommended to input sorted acclerometer data by \code{order_acc}.
}
\examples{
data(whitestork_acc)
whitestork_acc_sorted <- order_acc(whitestork_acc)
df_time <- calculate_feature_time(df_raw = whitestork_acc_sorted, winlen_dba = 11)
df_time_1d <- calculate_feature_time(df_raw = whitestork_acc_sorted[, seq(3, 121, by = 3)],
                         winlen_dba = 11, axis_num = 1) #example for single-axial ACC
df_time_2d <- calculate_feature_time(df_raw = whitestork_acc_sorted[, -seq(1, 120, by = 3)],
                         winlen_dba = 11, axis_num = 2) #example for dual-axial ACC
}
