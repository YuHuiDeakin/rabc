% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/feature_calculation.R
\name{calculate_feature_freq}
\alias{calculate_feature_freq}
\title{Frequency domain feature calculation}
\usage{
calculate_feature_freq(df_raw = NULL, samp_freq, axis_num = 3)
}
\arguments{
\item{df_raw}{A data.frame or tibble contains raw accelerometer data. In this
version, it should be arranged as x,y,z,x,y,z,...,label for each row and all
rows should have the same length. For dual-axial accelerometer data, it should
be arranged as x,y,x,y,...,label. And for single-axial, it's arranged as x,x,...,
label.}

\item{samp_freq}{A double scalar indicate sampling frequency of the accelerometer}

\item{axis_num}{An integer scalar indicating number of axies in the dataset.}
}
\value{
A data.frame contains all caculated frequency domain features with 9
 variables (columns) named x_freqmain, y_freqmain, z_freqmain, x_freqamp,
 y_freqamp, z_freqamp, x_entropy, y_entropy, z_entropy. The cases (rows) in
 the returned data.frame equal to the cases of df_raw. For dual-axial accelerometer
 data, the returned data.frame will contain columns with prefix "x" and "y".
 For single-axis, the returned data.frame will contain columns with prefix "x".
}
\description{
\code{calculate_feature_freq} calculates accelerometer data into frequency domain
mathemetical features
}
\details{
In this function, basic frequency domain features were calculated including:
main frequency, main amplitude and frequency entropy. All these features act on
each accelerometer axis, denoted by x, y, z. The extraction of these features
rely on fast Fourier transform (FFT) of raw accelerometer data. Frequency entropy
here measures unpredictability of the signal. See
\url{https://en.wikipedia.org/wiki/Entropy_(information_theory)}
for more information.

It is recommended to input sorted acclerometer data by \code{order_acc}.
}
\examples{
data(whitestork_acc)
whitestork_acc_sorted <- order_acc(whitestork_acc)
df_freq <- calculate_feature_freq(df_raw = whitestork_acc_sorted, samp_freq = 10.54)
df_freq_1d <- calculate_feature_freq(df_raw = whitestork_acc_sorted[, seq(3, 121, by = 3)],
                         samp_freq = 10.54, axis_num = 1) #example for single-axial ACC
df_freq_2d <- calculate_feature_freq(df_raw = whitestork_acc_sorted[, -seq(1, 120, by = 3)],
                         samp_freq = 10.54, axis_num = 2) #example for dual-axial ACC
}
